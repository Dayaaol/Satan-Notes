Regex For Pentesting:
====================
Basics:
	Terms:
		Expression:
	Advantages:
		Its useful in extracting information from any text by searching for one or more matches of a specific search pattern (i.e. a specific sequence of ASCII or unicode characters).
	Note:
		Regex is used in a lot of languages, such as Python, Ruby, Javascript, Perl, Bash, etc.
dot:
	'.' matches anything
Anchors:
	Anchors do not match characters. Instead, they match zero length features of a piece of text, such as the start and end of the text
	abcd => matches any string that has the text abcd in it
	^x => matches start of string
	y$ => matches end of string
Grouping:
	Using characters in ()
	Example:
		^(ab)
Quantifiers:
	Types:
		Greedy:
		Reluctant:.
		Possessive:
		+,?,*,{} :
	abc* => matches up zero or more times the preceding character
		abc or abcc 
	abc+ =>matches up zero or more times the preceding character
	abc? => Matches up exactly one character
	abc{n} => matches a string that has ab followed by n c
	abc{2,5} => matches a string that has ab followed by 2 up to 5 c
	a(bc)* => matches a string that has a followed by zero or more copies of the sequence bc
OR operator:(| and [])
	It subdivides a regular expression into alternative subpatterns
	a(b|c) => matches a string that has a followed by b or c
	a[bc] => matches a string that has a followed by b or c
Character classes:
	\d => matches a single character that is a digit
	\w => matches a word character (alphanumeric character plus underscore)
	\s => matches a whitespace character
Word Boundaries:
	allows to perform "whole words only" search
	\b => anchor for the word
	\bword\b
Metacharacters:
	^ $ . [ ] { } Â­ ? * + ( ) | \ [^] 
		\$ => matches a $ character



Flags:
	A regex usually comes within this form /abc/, where the search pattern is delimited by two slash characters /, At the end we can specify a flag with these values:
Bracket expressions:([])
	[abcd] = match a range of characters
	[^ ] => match all character except for the one mentioned in braces
	














grep -o '[^/]*\.megacorpone\.com'
	^/ => to negate / => to not include /
	[^/]* => to search for any number of characters(*), not including a forward-slash
	\. => it means we are looking for '.'
	meaning => anything.megacorpone.com
[^/,"]*
	^/.," => to not include  / . , "
	[^/,"]* => anything not having / . , "