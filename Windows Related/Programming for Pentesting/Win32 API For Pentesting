Win32 API For Pentesting:
========================
Basics:
	Win32 API exists in DLL files and run as unmanaged code(low-level code, ie in C++) and offers developers pre-built functionality.
	Terms:
	Note:
		Read OS Concepts Sheet to read about basics of OS API.
Microsoft Charsets:
	Read Windows Internals Sheet
Microsoft Data Types:
	Basics:
		WinAPI uses native C data types.
		Naming Convention:
			W => Unicode/UTF-16/Wide Char
			U => Unsigned
			Q => 
			L => 
			P => Pointer
			T => Unicode/Normal 
			C => Count
	Types:
		BOOL:
			Boolean Variable. Can be True or False
		BOOLEAN:
			Same as BOOL. But defined in a different header file.
		BYTE:
			8 bits
		WBYTE:
		TBYTE:
			If unicode is defined, then its WBYTE
			IF unicode is not defined, then its BYTE
		VOID:
			Any type.
		CONST:
			A variable whose value is to remain constant during execution.
		CHAR:
			An 8-bit ANSI characrer
		UCHAR:
			An unsigned CHAR.
		WCHAR:
			A 16-bit Unicode character
		TCHAR:
			If unicode is defined, then its WCHAR
			IF unicode is not defined, then its CHAR
		CCHAR:
			CCHAR is the type that can contain a count of chars.		
		UNICODE_STRING:
			A Unicode string.
		INT:
			A 32-bit signed integer
			Range => {-2147483648, 2147483647}
		UNIT:
			A 32-bit signed integer
			Range => {0, 4294967295}
		INT8:
			An 8-bit signed integer.
		UINT8:
			An 8-bit unsigned integer.
			Range => {0, 4294967295}
		INT16:
			A 16-bit signed integer.
		UINT16:
			A 16-bit unsigned integer.
		INT32:
			A 32-bit signed integer.
		UINT32:
			A 32-bit unsigned integer.
			Range => {0, 4294967295}
		INT64:
			A 64-bit signed integer.
		UINT64:
			A 64-bit unsigned integer.
			Range => {0, 18446744073709551615}
		INT_PTR:
			Signed int data type for pointer precision.
			Used when casting a pointer to an int to perform pointer arithmetic
		UINT_PTR:
			An unsigned INT_PTR.
		SHORT:
		USHORT:
			An unsigned SHORT
			Range => {0, 65535}
		LONG:
			A 32-bit signed integer.
			Range => {-2147483648, 2147483647}
		ULONG:
			A 32-bit unsigned integer.
			Range => {0, 4294967295}
		LONG32:
			A 32-bit signed integer.
			Range => {-2147483648, 2147483647}		
		ULONG32:
			An unsigned LONG32.
			Range => {0, 4294967295}
		LONG64:
			A 64-bit signed integer.
			Range => {-9223372036854775808, 9223372036854775808}
		ULONG64:
			An unsigned LONG64.
			Range => {0, 18446744073709551615}
		LONGLONG:
			A 64-bit signed integer.
			Range => {-9223372036854775808, 9223372036854775808}
		ULONGLONG:
			A 64-bit unsigned integer.
			Range => {0, 18446744073709551615}
		LONG_PTR:
			A signed long type for pointer precision.
		ULONG_PTR:
			An unsigned LONG_PTR
		WORD:
			A 16-bit unsigned integer.
			Range => {0, 65535}
		DWORD:
			A 32-bit unsigned integer.
			Range => {0, 4294967295}
		DWORDLONG:
			A 64-bit unsigned integer.
			Range => {0, 18446744073709551615}
		DWORD_PTR:
			Unsigned long data type for pointer precision.
			Used when casting a pointer to a long type to perform pointer arithmetic
			Also commonly used for general 32-bit parameters that have been extended to 64 bits in 64-bit Windows
		QWORD:
			A 64-bit unsigned integer.
		FLOAT:
			A floating-point variable.
		HALF_PTR:
			Half the size of a pointer. Used within a structure that contains a pointer and two small fields.
		UHALF_PTR:
			An unsigned HALF_PTR.
		HANDLE:
			A handle to an object.
		HKEY:
			A handle to a key.
		HLOCAL:
			A handle to a local memory block.
		SIZE_T:
			The maximum number of bytes to which a pointer can point
		SSIZE_T:
			A signed version of SIZE_T.
		LPBOOL:
			A pointer to a BOOL.
		LPBYTE:
			A pointer to a BYTE.
		LPHANDLE:
			A pointer to a HANDLE.
		LPINT:
			A pointer to an INT.
		LPLONG:
			A pointer to a LONG.
		LPSTR:
			A pointer to a null-terminated string of 8-bit Windows (ANSI) characters.
		LPCWSTR:
			A pointer to a constant null-terminated string of 16-bit Unicode characters.
		LPTSTR:
		LPCSTR:
			A pointer to a constant null-terminated string of 8-bit Windows (ANSI) characters.
		LPCTSTR:
		LPWSTR:
			A pointer to a null-terminated string of 16-bit Unicode characters. 
		LPCVOID:
			A pointer to a constant of any type.
		LPVOID:
			A pointer to any type.
		LPDWORD:
			A Pointer to a DWORD.
		LPWORD:
			A Pointer to a WORD.
		PVOID:
			A pointer to any type.
		PTBYTE:	
			A pointer to a TBYTE.
		PUCHAR:
			A pointer to a UCHAR.
		PWCHAR:
			A pointer to WCHAR.
		PTCHAR:
			A pointer to a TCHAR.
		PSTR:
			A pointer to a null-terminated string of 8-bit Windows (ANSI) characters.
		PWSTR:
			A pointer to a null-terminated string of 16-bit Unicode characters	
		PTSTR:
			If unicode is defined, then its PWSTR
			IF unicode is not defined, then its PSTR
		PINT:
			A pointer to a INT.		
		PINT8:
			A pointer to a INT8.		
		PUINT8:
			A pointer to a UINT8.		
		PINT16.
			A pointer to a INT16.		
		PUINT16.
			A pointer to a UINT16.
		PINT32:
			A pointer to a INT32.
		PUINT32:
			A pointer to a UINT32.
		PINT64:
			A pointer to a INT64.	
		PUINT64:
			A pointer to a UINT64.	
		PINT_PTR:
			A pointer to a INT_PTR.
		PUINT_PTR:
			A pointer to a UINT_PTR.			
		PUSHORT:
			A pointer to a USHORT.
		PSHORT:
			A Pointer to SHORT.
		PLONG:
			A pointer to a LONG.
		PULONG:
			A pointer to a ULONG.
		PLONG32:
			A pointer to a LONG32.		
		PULONG32:
			A pointer to a ULONG32.
		PLONG64:
			A pointer to a LONG64.		
		PULONG64:
			A pointer to a ULONG64.
		PLONGLONG:
			A pointer to a LONGLONG.
		PULONGLONG:
			A pointer to a ULONGLONG.		
		PLONG_PTR:
			A pointer to a LONG_PTR.
		PULONG_PTR:
			A pointer to a ULONG_PTR.
		PUHALF_PTR:
			A pointer to a UHALF_PTR.
		PSSIZE_T:
			A pointer to a SSIZE_T.
		PSIZE_T:
			A pointer to a SIZE_T.
		PHANDLE:
			A pointer to a HANDLE.
		PHKEY:
			A pointer to a HKEY.
		PHALF_PTR:
			A pointer to a HALF_PTR.
		PWORD:
			A pointer to a WORD.
		PDWORD:
			A pointer to a DWORD.
		PDWORD32:
			A pointer to a DWORD32.
		PDWORD64:
			A pointer to a DWORD64.
		PDWORDLONG:
			A pointer to a DWORDLONG.
		PDWORD_PTR:
			A pointer to a DWORD_PTR.
		PFLOAT:
			A pointer to a FLOAT.
		POINTER_32:
			A 32-bit pointer.
			On a 32-bit system, this is a native pointer.
			On a 64-bit system, this is a truncated 64-bit pointer.
		POINTER_64:
			A 64-bit pointer.
			On a 64-bit system, this is a native pointer.
			On a 32-bit system, this is a sign-extended 32-bit pointer.
		POINTER_SIGNED:
			A signed pointer.
		POINTER_UNSIGNED:
			An unsigned pointer.
Understanding WinAPI Functions:
	Note:
		To read about any Function in depth:
			https://docs.microsoft.com/en-us/windows/win32/api/winbase/
Last character of function name represents charset:
	ASCII:
		Last Character => A
		1 byte per character
	UNICODE:(aka UTF-16)(aka Wide Char)
		Last Character => W
		Atleast 2 bytes per character
Using WinAPI in VBA: Read VBA for Pentesting Sheet
Using WinAPI in Malware Development: Read Malware Development Sheet
Functions Glossary:
	Note:
		This is Gloassary of WinAPI functions and where it is used in pentesting along with references(if any) in my notes.
	CreateRemoteThread():
		To create your own thread
		Read Malware Development Sheet
	GetModuleHandle():
		To gain HANDLE
		Read Malware Development Sheet
	GetProcessAddress():
		To get the address of a process
		Read Malware Development Sheet
	GetUserName():
		To get Username
		Read VBA for Pentesting Sheet
	OpenProcess():
		To open the process
		Read Malware Development Sheet
	WriteProcessMemory():
		To write to a process's memory
		Read Malware Development Sheet
	VitualAllocEx():
		To allocate memory to a process
		Read Malware Development Sheet