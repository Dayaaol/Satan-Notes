Assembly For Pentesting:
=======================
Basics:
	Basics Terms:
		Assembler:
			It transaltes Assembly code into Machine code.
			Output of an assembler is called an object file.
			Types:
				NASM:(Netwide Assembler)
					x86 Assemblerused to write 16-bit, 32-bit and 64 bit programs
				MASM:(Microsoft Macro Assembler)
					x86 Assembler that uses intel syntax for MS-DOS and windows
				TASM:(Turbo Assembler)
				FASM:(Flat Assembler)
					x86 Assembler suppors intel-style for 32-bit and 64-bit
				GAS:(GNU Assembler)
	Comments in Assembly:
		;comment
	Types:
		Intel:(Windows)
			<Instruction><destination><source>
		AT&T:(Linux)
			<instruction><source><destination>
			adds % before registers and a $ before numbers
			adds a suffix to the instuction to define operand size as well:
				Q => quad(64bit)
				L => Long(32bit)
				W => Word(16bit)
				B => Byte(8bit)
Instructions:
	Arithmetic:
		ADD:
			Increment
			Example:
				ADD EAX,EBX ; adds EBX in EAX, so EAX = EAX + EBX
		SUB:
			Subtract
		MUL:
			Multiply
		XOR:
			Exclusive OR 
			output is true only when inputs differ, ie one is true and other is false
		NOT:
			same as '!'
	Data Transfer:
		MOV:
			Moves data from one location to another in memory
			Example:
				MOV EAX, 2 ;stores 2 in EAX
		XCHG:
			Exchange the data of two operands (but not between memory)
		PUSH:
			Pushes a value into the stack
		POP:
			Deletes a value off the stack
	Flow of Control:
		CALL:
			CALL a function
		RET:
			Return, end function
		LOOP:
		Jcc:(J(condition))
			jump if:
				NE(Not Equal)
				E(Equal)
				NZ(Not Zero)
				GE(Greater than or Equal)
	Other Instructions:
		STI:
		CLI:
		IN:
		OUT:
		NOP:(No Operation Instruction)
			This instruction do nothing. When a program encounters a NOP, it simply skips to the next instruction.
			Opcode value => 0x90
			This is used for NOP-Sled in BOF => Read Stack-based BOF sheet to know more
NASM:
	Usage:(Kali> msf-nasm_shell)
		nasm> jmp <register name> => gives opcode