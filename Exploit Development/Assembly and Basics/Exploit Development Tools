Exploit Development Tools:
=========================
Basics:
	Debugger:
		A Debugger is a program which runs other programs in itself, in a way that we can control the program it is running.
		Think of Debugger as BURP(a Proxy) between Binary Appplication and CPU
		Uses:
			Exploit Development
			Reverse Engineering
			Program Analysis
		Note:
			Always run a debbuger as Administrator
	Compiler:
		It tranlates High level Program code to machine language by reading whole source code at once and executing the whole program
	Decompiler:
		Its opposite of compiler
		It takes an executable file as input, and attempts to create a high level source file which can be recompiled successfully.
	Disassembler:
		Its used to disassemble executable programs
Debuggers:
	Immunity Debugger:
		Better Appearance:
			Right-click -> Apperacne -> Font(all) -> OEM fixed font
			Go to Options >> Appearance >> Fonts >> Change(Consolas, Blod, 9) >> OK
		Shortcuts:
			File -> Attach => attach a process
				Using TCPView.exe to find PID:
					Sort by local port -> Find the port which vulnerable service is listening on -> copy PID
				Select the PID
			File -> Open => Open a program(.exe)
			F9 => Run prog
			Ctrl + F9 => Run till Return
			F2 => Add/Remove a breakpoint
			Ctrl + F2 => restart the prog
			Alt + F2 => close the prog
			Alt + C => Sometimes, Register window goes blank, to bring it back we use this command
			F7 => step into
			F8 => step over
			Ctrl + G => Go-To the mentioned Address (Right-Click -> Go-To -> expression -> enter address)
		Windows:(4) 
			Stack window:
				Stack Frame:	
					We see stack frame in Stack Window highligthed with a white vertical line
				DEST => This point to an Address in Stack which starts the Buffer. This Address is aka Offset-Zero
				SRC => SRC contains data(The Input)(ex: aaaaaaaaaaa). This data is copied to the Address pointed by DEST. 
				Every Entery in stack window is of 4 bytes.
				Changing Address format in Stack Window:
					1. Right-Click in Stack Window -> Address:
						A. Absoulte => show actual Address
						B. Relative to Selection => explained below
						C. Relative to ESP
						D. Relative to EBP
					2. Relative to Selection:
						By double-clicking on an address in stack window, we see all enteries in Stack with Address relative to the address we double clicked.
							==> means Offset-Zero
							-ve => Show Offsets which are relatively before Offset-Zero
							+ve => Show Offsets which are relatively after Offset-Zero
	mona.py:(https://github.com/corelan/mona)
		Installation:
			Unzip it inside "PyCommand" folder of Immunity Debbuger installation folder
		Usage:
			!mona config -set workingfolder c:\mona\%p
				This sets up folder for mona to write the log file
				%p variable will be replaced with the process name currently being debugged.
				Note:
					c:\abcd shall be a valid directory
			offset:
				!mona pc 3333 => same as msf-pattern_create -l 3333
					It will generate the following output in the mona directory:
						ASCII => pattern in ASCII
						HEX => pattern in HEX
				!mona pattern_create 3333 => same as above
				!mona patter_offset vaule_at_EIP => to find offset
			BadChars:
				!mona bytearray
					This will create bytearray.txt and bytearray.bin having badchar array containing hexbytes from \x00 to \xff
					Copy badchars from bytearray.txt
				!mona bytearray -b \x00
					This will create bytearray.txt and bytearray.bin having badchar array containing hexbytes except \x00
					Copy badchars from bytearray.txt
				!mona compare -a <address> -f c:\mona\bytearray.bin
				!mona compare -a esp -f c:\mona\bytearray.bin
					Lists the BadChars by comparison
			JMP ESP:
				!mona jmp -r esp -cpb "\x00\x01" => Find jmp esp dll which dont have badchars
				!mona modules => show all modules
				!mona find -s "\xff\xe4" -m "<module_name>" => Finds modules which have JMP ESP inst in them
			Finding Modules without ASLR:
				!mona noaslr
			Flags:
				-cpb => allows you to specify bad characters for other functions
				-a => address
				-b => to exclude bytes from array
				-r => register
				-s => string
				-m => module
	WinDBG:
		Windows:
	OllyDBG:
	X64DBG:
	IDA:
	GDB:
	EDB:
	Hopper:
Complier:
	Orwell Dev-C++:
	Visual Studio C/C++:
	Dev-C++:
		It automatically installs a lot of other tools in "C:\Program Files (x86)\Dev-Cpp\MinGW64\bin" such as:
			gcc.exe => compiler
			objdump.exe => decomplier
	gcc.exe:
		Basics:
			Its used to compiler .c and .cpp files in CLI mode.
			It works on both windows and linux
		Usage:
			gcc(.exe) -m32 file.c -o file.exe
			Flags:
				-m32 => for 32-bit enviroment
Assembler:
	Read Assembly for Pentesting Sheet
DeComplier:
DisAssembler:	
	objdump.exe:
		Usage:
			objdump -d -Mintel file.exe > file_asm.txt
			Flags:
				-d => disassemble
				-Mintel => Intel Arch
		