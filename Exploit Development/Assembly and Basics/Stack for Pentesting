Stack for Pentesting:
====================
Basics:
	Stack is a LIFO(Last-In First-Out) structure:
		Last element to be PUSHed is POPed out first
	Stack Frame:(Important)
		A Stack consists of multiple logical areas/portions known as Stack Frames that are PUSHed when calling a Subroutine(function) and POPed when returning a value.
		When a subroutine(a function or procedure) is started, a stack frame is created and assigned to the current ESP location(top of stack), this allows the subroutine to operate independently in its own location in the stack.
		When a subroutine ends:
			1. The program recieves the parameters passed form the subroutine.
			2. The insturction Pointer(EIP) is reset to the location at the time of the initial call. The stack frame keeps track of the location where each subroutine should return the control when it terminates.
		Prologue:
			Prologue prepares the STACK(in program memory) to be be used. Working of Prologue is similar to putting a bookmark in a book.
			It is used when a function CALL is encountered.
			Example:
				push ebp
					It saves the old EBP onto the stack, so it could be restored later.
				mov ebp, esp
					It copies ESP value to EBP.
				sub esp, x(number)
					It moves the ESP by decreasing it's value, necessary for making space for the local variables.
		Epilouge:
			When the function has completed, the epilogue resets the STACK(in program memory) to the prologue settings.
			It resets the stack to its Prologue settings
			Example:
				move esp, ebp
					It makes both the ESP and EBP point to the same location.
				pop ebp
					It removes the value of EBP from the stack, since the top of the stack points to the old EBP, the stack frame is restored (ie ESP points to the old EIP previously stored)
				ret
					It pops the value contained at the top of the stack to the old EIP - The next instruction after the call and jumps to that location.
					RET affects only the EIP and the ESP registers.
		Note:
			ePTPv5's Security Module's PDF has a good visual representation of working of Stack Frames explained from page 46-54			
	Structure in Program Memory:
		A Stack grows downwards, from upper memory address to lower memory address.
		It is located in the higher part of the memory.
	Uses:
		Its used a short-term data storage for functions,local variables(not global variables) and program control information for a thread.
		It Can be thought as an array used for saving a fucntion's return addresses, passing function arguments, and storing local variables.
Registers Related to Stack:
	ESP:(Stack Pointer)
		Purpose of ESP is to identify the top of the stack.
		It is modified each time a value is pushed in(PUSH) or popped out(POP).
Assembly Instructions related to Stack:
	PUSH:
		A PUSH instruction subtracts 4(32-bit) or 8(64-bit) from the ESP and writes data to the memory address pointed by the ESP, then update the ESP to top of the stack
		Why do we subtract:
			Stack grows backwards, therefore the PUSH substracts 4 or 8, in order to point to a lower memory location on the stack. If we don't subtract it, the PUSH operation will overwrite the current location pointed by ESP(the top) and we'd lose data
		It is used to insert data value into top of Stack.
	POP:
		A POP instruction adds 4(32-bit) or 8(64-bit) from the ESP and writes data to the memory address pointed by the ESP.
		It is used to Retrive data from the top of stack