Hardware:
========
Note:
	This sheet is applicable for understanding both Binary concepts and OS Concepts.
Basics:
	Terms:
		Variables:
			Global:
				They have Global scope
				They are stored in ".data segment" of program memory
			Local:
				They have local scope
				They are stored in their respective func's stack frame	
		Opcode:(Operaion Code)
			An Opcode is a binary value which tells CPU what action to perform.
		Bytecode:(aka p-code)(aka Portable Code)
			Instruction sets that have one-byte opcodes followed by optional parameters
		Native Code:
			When dealing with high-level languages, any code compiled into opcodes is often referred to as native code.
		Instruction:
			It is a primitive(basic) command that executes a specific operation such as move data, etc.
			CPU instructions are written in ASM and are represented in HEX format.
		Stack and Terms realted to it: Read Stack Sheet
		Compiler:
			Read Compliers and Decompliers Sheet
		Interpreter:
			It also tranlates High level Program code to machine language, But it reads the source code line by line and executes the whole program line by line too.
		Assembler:
			Read Assembly For Pentesting sheet
		Linker:
			It links and merges various object files together in order to make an executable file
		Loader:
			Its a part of operating system and is responsible for loading executable files into memory and execute them
		DeComplier:
			Read Compliers and Decompliers Sheet
		DisAssembler:
		Debugger:
			Read Debuggers Sheet
	Hardware includes Memory, one or more CPUs to perform computation and to read from and to write to memory, and Devices such as disks, and network interfaces.
CPU:
	Basics:
		Terms:
	CPU Components:
		Basics:
		Components:
			MMU:(Memory Management Unit)
				Its a part of morder CPUs and helps to enable Virtual Memory.
	Architecture:
		Hiearchy of Architecture:
			We go from level 4 to level 1 when a prog is executed
			Level 1:
				Digital Binary Logic
			Level 2:
				ISA:(Instruction Set Architecture)
					Each CPU has its own ISA which includes memory/registers/instructions
				It is Processor-maker specific.
			Level 3:
				Assembly
			Level 4:
				High level language
		Types:
			x86:
				Orginiated from Intel 8086
				32-bit processes
			x64:(aka x86_64)(aka AMD64)
				64-bit procceses
		Registers:
			Registers are fixed, small extremly fast CPU storage locations used as "Variables" to store and utlilize data temporarily.
			Width of Registers:
				The number of bits (32 or 64) refer to the width of CPU registers
				Registers are a part of memory.
				Lets say i got 32 gb ram, but a register will only consist of 32-bits of memory
			Hiearchy of Register:
				8 bit -> 16 bit -> 32-bit -> 64 bit
				Example:
					Lets use RAX as example
					RAX:(64-bit)
						EAX + EAX
						R => Register
					EAX:(32-bit)
						AX + AX
						E => Extended
					AX:(16-bit)
						AH + AL
					AH,AL:(8 bit)
						H => High
						L => Low
			Types of Registers:
				x86:
					GPR:(General Purpose Registers)(6)
						Data Operations:	
							EAX:(Extended Accumulator Register)
								Arithmetical and logical instructions
							EBX:(Extended Base Register)
								 Pointer to data in the DS segment
							ECX:(Extended Counter Register)
								Counter for string, loop and shift/rotate operations
							EDX:(Extended Data Register)
								I/O pointer
								used in arithmetic operations and I/O operations.
						Stream Operations:
							ESI:(Extended Source Index)
								2 Definitions to understand better:
									Used as a source pointer for string operations
									Used as a pointer to a source in stream operations
							EDI:(Extended Destination Index)
								2 Definitions to understand better:
									Used as a destination pointer for string operations
									Used as a pointer to a destination in stream operations
					Pointer Registers:(3)
						ESP:(Extended Stack Pointer Register)
							Pointer to the top of the stack.
							ESP is the "Current Stack Pointer"
							ESP stores the memory address pointing to top of stack.
							We use ESP's Value to find the top of stack
						EBP:(Extended Base Pointer Register)
							point to the base of the stack
							EBP is base pointer for "Current Stack Frame"
						EIP:(Extended Instruction Pointer Register)
							Points to the next instruction to be followed in the memory.
							It is the primary target of an attacker
				x64:
	Working:
		The Complied code produces Opcodes which are used by the CPU to perform an action
	CPU Virtualization:
Main Memory:
	Basics:
		Memory is stored in form of a stack
		Terms:
	Types:
		RAM:()
		ROM:()
	Data Represtentation in Memory:
		Data Types:
			Types:
				BE:(Big-Endian)
					LSB is stored at highest memory location
					MSB is stored at lowest memory location
					Example:
						0x12345678 will be stored as "\x12\x34\x56\x78"
				LE:(Little-Endian)
					LSB is stored at lowest memory location
					MSB is stored at highest memory location
					Example:
						0x12345678 will be stored as "\x78\x56\x34\x12"
			Numbers:
				Binary:
					{0,1}
				Decimal:
					{0 to 9}
				HEX:
					{0 to 9, a to f}
					CPU instructions are written in HEX not Binary
					}
			Characters:
				ASCII:
					Read Windows Internals Sheet
				UniCode:
					UTF-8:
					UTF-16:
						Read Windows Internals Sheet
					UTF-32:
		Endianness:
			Basics:	
				Way of representing(storing) values in memory
				MSB:(Most Significant Bit)
					Left-most bit is MSB
				LSB:(Least Significant Bit)
					Right-mosy bit is LSB
				Example:
					Binary number => 101
						MSB => 1
						LSB => 1
					Binary Number => 001
						MSB => 0
						LSB => 1
	Memory Virtualization:
		Basics:
			Terms:
				Memory Address Map:
				Virtual Memory:(aka Virtual Storage)
					Its a feature of an OS that enables a computer to be able to compensate shortages of physical memory by transferring PAGES of data from RAM to ROM.
					This process is done temporarily and is designed to work as a combination of RAM and space on the hard disk.
				Page:(aka Virtual Page)(aka Memory Page)
					Its a fixed-length continous block of virtual memory.
				Page Table:
	Program Memory:(aka Process Memory)
		When a binary application is executed, it allocates memory in a very specific way, known as Program Memory.
		We uses Virtual Memory Address Translation to divide RAM into small blocks of memory, where the lowest memory address is 0x00000000 and highest memory address is 0x7FFFFFFF
		Representation:
			Highest Mem Address =>  --------------------------
			                        |CLI Args & ENV Variables|
			                        --------------------------
			                        |        Stack           |
			                        ----------- --------------
			                        |          |             |
			                        |          v             |
			                        |      	Buffer           |
			                        |          ^             |
			                        |          |             |
			                        ----------- --------------
			                        |         Heap           |
			                        --------------------------  --
			                        |  Uninitiazed Data(bss) |   |
			                        --------------------------   |Data Segment
			                        |   Initiazed Data       |   |
			                        --------------------------  --
			                        |       Text             |
			Lowest Mem Address =>   --------------------------
			Note:
				Lowest Memory Address => 0x00000000
				Highest Memory Address => 0x7FFFFFFF
		Section-Wise Explanation:
			Segments:
				.text:(aka .code)
					It contains the machine instructions(code) of the program.
					It is read only. We cannot write into it.
				.data:
					It contains any global or static variables which have a pre-defined value and can be modified.
					Types:
						A. Initialized Data Segment:(aka Data Segment)
							Its a portion of the virtual address space of a program, which contains the global variables and static variables that are initialized by the programmer.
							Note that, the data segment is not read-only, since the values of the variables can be altered at run time.
							Types:
								1. Initialized read-only Data Segment:(aka .rodata segement)
									It contains only static constants rather than variables
								2. Initialized read-write Data Segment:
						B. Uninitialized Data Segment:(aka .bss segement)
							It contains all global variables and static variables that are initialized to zero or do not have explicit initialization in source code.
			Stack:
				The stack is the space reserved for the executing program to execute in.
				When a function is called, it's parameter and return info are placed on the stack.
				Read Stack Sheet to know more about stack
			Heap:
				Read Heap Sheet
			Buffer:
				Read Stack-Based BOF to know more about buffer
Disk:
	Basics:
	Protocols:
		SCSI:(Small Computer System Interface)
			Basics
			Types:
				SAS:(Serial Attached SCSI)
				iSCSI:(Internet SCSI)
				HyperSCSI:
		ATA:
			Basics:
			Types:
				PATA:(Parallel ATA)
				SATA:(Serial ATA)
					Basics:
					Types:
						eSATA:(External SATA)
							Basics:
							Types:
								eSATAp:(Powered eSATA)
						mSATA:(Mini SATA)
						SATA Express:
						M.2:
						U.2:
				AoE:(ATA over Ethernet)
	Types:
		DAS:(Direct-Attached Storage)
			Types:
				HDD:
				SDD:
				NVMe:(NVM Express)
		NAS:(Network-Attached Storage)
		SAN:(Storage Area Network)(aka Storage Network)
	Storage Virtualization:
		Basics:
		Protocols:
			RAID:(Redundant Array of Inexpensive Disks)(aka Redundant Array of Independent Disks)
				Basics:
				Types:(7)
					1. RAID 0:
					2. RAID 1:
					3. RAID 2:
					4. RAID 3:
					5. RAID 4:
					6. RAID 5:
					7. RAID 6:
BUS:
Network Interfaces: